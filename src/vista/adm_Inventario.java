package vista;

import com.mxrck.autocompleter.TextAutoCompleter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Conexion;
import org.apache.commons.dbutils.DbUtils;

public class adm_Inventario extends javax.swing.JInternalFrame {

    // Se instancia una conexion de la clase conecta
    Conexion con = new Conexion();
    DefaultTableModel modelo;
    int total = 0;
    Double dOrigen=0.0;

    public adm_Inventario() {
        // esto va antes del initComponents
        initComponents();
        mostrarTabla();
        inicio();
        txtIdProveedor.setVisible(false);
        txtCantidad.setVisible(false);
        txtId.setVisible(false);
        completeNombre();
        completeFamilia();
        completeBuscar();
    }


    void mostrarTabla() {
        // desde aqui mandamos a llamar a todos los usuarios y los listamos en la tabla
        // se crea una matriz para almacenar los datos
        
        String[] cabecera = {"id", "Nombre", "Orden","Familia", "Cantidad", "Unidad", "Fecha","total"};
        // se definen los registros que llevara la tabla
        String[] registros = new String[8];
        // se hace el llamado sql de todos los usuarios
        String sql = "SELECT idinventario, nombre,orden,"
                + "familia,cantidad,unidad,fecha,total"
                + " FROM inventario ORDER BY FECHA DESC LIMIT 50";
        //establecemos los anchos en pixeles de las columnas
        int[] anchos = {0, 300,100, 100, 100, 100, 100,50};
        modelo = new DefaultTableModel(null, cabecera);
        Connection cn = con.conectar();
        ResultSet rs = null;
        Statement st = null;
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                registros[0] = rs.getString("idinventario");
                registros[1] = rs.getString("nombre");
                registros[2] = rs.getString("orden");
                registros[3] = rs.getString("familia");
                registros[4] = rs.getString("cantidad");
                registros[5] = rs.getString("unidad");
                registros[6] = rs.getString("fecha");
                registros[7] = rs.getString("total");
                modelo.addRow(registros);

            }
            tabla.setModel(modelo);
            for (int i = 0; i < cabecera.length; i++) {
                tabla.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
                tabla.setFont(new java.awt.Font("Tahoma", 0, 12));
            }
            // asignamos la columna 0 para esconderla
            tabla.getColumnModel().getColumn(0).setMaxWidth(0);
            tabla.getColumnModel().getColumn(0).setMinWidth(0);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(0);
        } catch (SQLException ex) {
            System.out.println("Sin poder ejecutar el query a la tabla "+ex);
        }

    }

    void inicio() {
        txtNombre.setEnabled(false);
        txtExistencia.setEnabled(false);
        txtExistencias.setEnabled(false);
        jdFecha.setEnabled(false);
        jcUnidad.setEnabled(false);
        txtFamilia.setEnabled(false);
        txtOrden.setEnabled(false);
        btnEditar.setEnabled(true);
        btnGrabar.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnCancelar.setEnabled(false);
        completeNombre();
        completeFamilia();
        completeBuscar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        panelMaterial = new javax.swing.JPanel();
        txtNombre = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtExistencia = new javax.swing.JTextField();
        txtId = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JLabel();
        jcUnidad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtOrden = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jdFecha = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        txtFamilia = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtExistencias = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnGrabar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtBNombre = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        txtIdProveedor = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Listado"));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelMaterial.setBackground(new java.awt.Color(204, 204, 204));
        panelMaterial.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu Inventario"));

        txtNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreFocusLost(evt);
            }
        });

        jLabel6.setText("Nombre:");

        jLabel8.setText("Cantidad");

        txtId.setFont(new java.awt.Font("Lucida Grande", 0, 5)); // NOI18N
        txtId.setText("CVE");

        txtCantidad.setFont(new java.awt.Font("Lucida Grande", 0, 5)); // NOI18N
        txtCantidad.setText("CVE");

        jcUnidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PIEZA", "CAJA", "METRO", "KILO", "LITRO", " " }));

        jLabel3.setText("Unidad");

        jLabel1.setText("Orden de Compra:");

        jLabel2.setText("Fecha:");

        jLabel5.setText("Familia:");

        jLabel7.setText("Existencias:");

        javax.swing.GroupLayout panelMaterialLayout = new javax.swing.GroupLayout(panelMaterial);
        panelMaterial.setLayout(panelMaterialLayout);
        panelMaterialLayout.setHorizontalGroup(
            panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMaterialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMaterialLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18))
                        .addGroup(panelMaterialLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(71, 71, 71)))
                    .addGroup(panelMaterialLayout.createSequentialGroup()
                        .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(panelMaterialLayout.createSequentialGroup()
                                .addComponent(txtId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCantidad)))
                        .addGap(66, 66, 66)))
                .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMaterialLayout.createSequentialGroup()
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(txtExistencia))
                        .addGap(18, 18, 18)
                        .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcUnidad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelMaterialLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panelMaterialLayout.createSequentialGroup()
                        .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOrden)
                            .addComponent(txtFamilia))
                        .addGap(18, 18, 18)
                        .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jdFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(txtExistencias))))
                .addContainerGap())
        );
        panelMaterialLayout.setVerticalGroup(
            panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMaterialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMaterialLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtNombre)
                            .addComponent(txtExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFamilia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(txtExistencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId)
                    .addComponent(txtCantidad))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Operaciones"));

        btnNuevo.setMnemonic('n');
        btnNuevo.setText("Nuevo");
        btnNuevo.setInheritsPopupMenu(true);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnActualizar.setMnemonic('a');
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEditar.setMnemonic('e');
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnGrabar.setMnemonic('g');
        btnGrabar.setText("Grabar");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });

        btnCancelar.setMnemonic('c');
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGrabar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBorrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGrabar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnActualizar)
                .addGap(59, 59, 59)
                .addComponent(btnBorrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addGap(21, 21, 21))
        );

        btnMenu.setMnemonic('c');
        btnMenu.setText("Cerrar");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Busqueda"));

        jLabel4.setText("Nombre:");

        btnBuscar.setMnemonic('b');
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtIdProveedor.setText("_");

        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtBNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(txtIdProveedor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIdProveedor)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelMaterial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(16, 16, 16)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMenu)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(btnMenu)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        //Boton nuevo
        btnBuscar.setEnabled(false);
        btnNuevo.setEnabled(false);
        btnBorrar.setEnabled(false);
        btnGrabar.setEnabled(true);
        btnEditar.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnCancelar.setEnabled(true);
        txtNombre.setEnabled(true);
        txtNombre.requestFocus();
        txtExistencia.setEnabled(true);
        jcUnidad.setEnabled(true);
        jdFecha.setEnabled(true);
        txtFamilia.setEnabled(true);
        txtOrden.setEnabled(true);
        txtOrden.setText("");
        txtFamilia.setText("");
        txtExistencia.setText("");
        txtExistencias.setText("");
        txtNombre.setText("");
        jdFecha.setDate(null);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //se cancela todo
        inicio();
        mostrarTabla();
        btnNuevo.setEnabled(true);
        btnCancelar.setEnabled(false);
        txtNombre.setText("");
        txtExistencia.setText("");
        txtExistencias.setText("");
        txtOrden.setText("");
        txtFamilia.setText("");
        btnBuscar.setEnabled(true);
    }//GEN-LAST:event_btnCancelarActionPerformed
    
    private void completeNombre(){
    TextAutoCompleter textAutoCompleter = new TextAutoCompleter(txtNombre);

    textAutoCompleter.setMode (0); // infijo
    textAutoCompleter.setCaseSensitive (false); //No sensible a mayúsculas
    Connection cn = con.conectar();
    Statement st = null;
    ResultSet rs = null;
    //iniciamos

    
        try {
            String sql = "SELECT  nombre FROM inventario GROUP BY nombre";
        st = cn.createStatement();
        rs = st.executeQuery(sql);
        while (rs.next()) {
            textAutoCompleter.addItem(rs.getString("nombre"));
            
        }
        
    }
    catch (SQLException ex

    
        ) {
            System.out.println("Sin poder ejecutar el query al autocomplete");
    }

    
        finally {
        DbUtils.closeQuietly(st);
        DbUtils.closeQuietly(rs);
        DbUtils.closeQuietly(cn);
        }
    }
    
    private void completeBuscar(){
    TextAutoCompleter textAutoCompleter = new TextAutoCompleter(txtBNombre);

    textAutoCompleter.setMode (0); // infijo
    textAutoCompleter.setCaseSensitive (false); //No sensible a mayúsculas
    Connection cn = con.conectar();
    Statement st = null;
    ResultSet rs = null;
    //iniciamos

    
        try {
            String sql = "SELECT  nombre FROM inventario GROUP BY nombre";
        st = cn.createStatement();
        rs = st.executeQuery(sql);
        while (rs.next()) {
            textAutoCompleter.addItem(rs.getString("nombre"));
            
        }
        
    }
    catch (SQLException ex

    
        ) {
            System.out.println("Sin poder ejecutar el query al autocomplete");
    }

    
        finally {
        DbUtils.closeQuietly(st);
        DbUtils.closeQuietly(rs);
        DbUtils.closeQuietly(cn);
        }
    }
    
    private void completeFamilia(){
    TextAutoCompleter textAutoCompleter = new TextAutoCompleter(txtFamilia);

    textAutoCompleter.setMode (0); // infijo
    textAutoCompleter.setCaseSensitive (false); //No sensible a mayúsculas
    Connection cn = con.conectar();
    Statement st = null;
    ResultSet rs = null;
    //iniciamos

    
        try {
            String sql = "SELECT  familia FROM inventario GROUP BY familia";
        st = cn.createStatement();
        rs = st.executeQuery(sql);
        while (rs.next()) {
            textAutoCompleter.addItem(rs.getString("familia"));
            
        }
        
    }
    catch (SQLException ex

    
        ) {
            System.out.println("Sin poder ejecutar el query al autocomplete");
    }

    
        finally {
        DbUtils.closeQuietly(st);
        DbUtils.closeQuietly(rs);
        DbUtils.closeQuietly(cn);
        }
    }
    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed
        int cantidad=0;
        int existencia=0;
        boolean suma=false;
        try {
            cantidad=Integer.parseInt(txtExistencia.getText());
            existencia=Integer.parseInt(txtExistencias.getText());
            int total=cantidad+existencia;
            txtExistencias.setText(String.valueOf(total));
            suma=true;
              } catch (Exception e) {
                 JOptionPane.showMessageDialog(this, "Revisar las cifras escritas", "Atencion", 1); 
              }

        //empezamos a grabar un nuevo registro a la bd de Inventarios
        //verificamos que no esten vacios los campos
        if (txtNombre.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Falta escribir el Nombre", "Atencion", 1);
        } else if (txtExistencia.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Falta escribir las existencias", "Atencion", 1);
        }else if (txtOrden.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Escribe una orden de pedidos", "Atencion", 1);
        }else if (jdFecha.getDate()==null) {
            JOptionPane.showMessageDialog(this, "Falta colocar una fecha", "Atencion", 1);
        }else if (txtFamilia.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Falta colocar la categoria o familia", "Atencion", 1);
        }else {
            // se verifica la informacion
            int respuesta = JOptionPane.showConfirmDialog(this, "Se va a introducir la siguiente informacion\n"
                    + "\nNombre:"
                    + txtNombre.getText() + "\ncon: "
                    + txtExistencia.getText() + " existencias dando un total de\n"
                            + txtExistencias.getText()+ " existencias", "Confirmacion", 2);
            //verificamos que informacion se va a agregar y si lo acepta se integra a la BD
                if (respuesta==0 && suma){
                   
                Connection cn = con.conectar();
                ResultSet rs = null;
                Statement st = null;
                PreparedStatement ps= null;
                 try {
                     java.util.Date d = jdFecha.getDate();
                     java.sql.Date date = new java.sql.Date(d.getTime());
                     String fecha=date.toString();
                     String sql = "INSERT INTO inventario (nombre,orden,unidad"
                                    + ",cantidad,fecha,familia,total) "
                                    + "VALUES (?,?,?,?,?,?,?)";
                            ps= cn.prepareStatement(sql);
                            ps.setString(1, txtNombre.getText().toUpperCase());
                            ps.setString(2, txtOrden.getText().toUpperCase());
                            ps.setString(3, jcUnidad.getSelectedItem().toString());
                            ps.setInt(4, cantidad);
                            ps.setString(5, fecha);
                            ps.setString(6, txtFamilia.getText().toUpperCase());
                            ps.setInt(7, Integer.valueOf(txtExistencias.getText()));
                            ps.executeUpdate();
                            
                            //actualizamos el total en todos los productos
                            sql = "UPDATE inventario set total=? WHERE nombre=?";
                            ps = cn.prepareStatement(sql);
                            
                            ps.setInt(1, Integer.valueOf(txtExistencias.getText()));
                            ps.setString(2, txtNombre.getText());
                            ps.executeUpdate();
                            JOptionPane.showMessageDialog(null, "Inventario Correctamente integrado");
                            inicio();
                            btnNuevo.setEnabled(true);
                            btnBuscar.setEnabled(true);
                            btnBorrar.setEnabled(true);
                            
                            txtNombre.setText("");
                            txtExistencia.setText("");
                            txtExistencias.setText("");
                            txtOrden.setText("");
                            txtFamilia.setText("");
                            jdFecha.setDate(null);
                            
                            mostrarTabla();
                } catch (SQLException ex) {
                    System.out.println(ex);
                }finally {
                    DbUtils.closeQuietly(st);
                    DbUtils.closeQuietly(rs);
                    DbUtils.closeQuietly(cn);
                    }
                 }
                }
            
    }//GEN-LAST:event_btnGrabarActionPerformed
    
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        //editando un producto
        int fila = tabla.getSelectedRow();
                Connection cn = con.conectar();
        if (fila >= 0) {
            String id;
            id = tabla.getValueAt(fila, 0).toString();

            try {
                Statement buscar = cn.createStatement();
                ResultSet resultado = buscar.executeQuery("SELECT * FROM inventario WHERE idInventario='" + id + "'");
                while (resultado.next()) {
                    txtNombre.setText(resultado.getString("nombre"));
                    txtExistencia.setText(String.valueOf(resultado.getInt("cantidad")));
                    txtOrden.setText(resultado.getString("orden"));
                    txtFamilia.setText(resultado.getString("familia"));
                   //pasamos la lectura de la fecha a date
                    String fecha=resultado.getString("fecha");
                    Date date;  
                    try {
                        date = new SimpleDateFormat("yyyy-MM-dd").parse(fecha);
                        jdFecha.setDate(date);
                    } catch (ParseException ex) {
                        Logger.getLogger(adm_Inventario.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    txtId.setText(String.valueOf(resultado.getInt("idInventario")));
                    txtExistencias.setText(String.valueOf(resultado.getInt("total")));
                    txtExistencias.setEnabled(true);
                    jdFecha.setEnabled(true);
                    txtOrden.setEnabled(true);
                    txtFamilia.setEnabled(true);
                    jcUnidad.setEnabled(true);
                    
                    
                }
            } catch (SQLException ex) {
                System.out.println("Sin poder ejecutar el query a la tabla"+ex);
            }
        }
        //aqui reviso que si se pasaron datos a la clave y activo el boton editar;
        if (txtNombre.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Selecciona un campo de la Tabla");
        } else {
            btnBuscar.setEnabled(false);
            txtNombre.setEnabled(true);
            txtExistencia.setEnabled(true);
            btnNuevo.setEnabled(false);
            btnEditar.setEnabled(false);
            btnActualizar.setEnabled(true);
            btnCancelar.setEnabled(true);
            btnBorrar.setEnabled(false);

        }

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        //Actualizamos la informacion
        // se verifica la informacion
        int respuesta = JOptionPane.showConfirmDialog(this, "Se va a actualizar la siguiente informacion"
                + "\nNombre:"
                + txtNombre.getText() + "\n con "
                + txtExistencia.getText(),"Confirmacion", 2);
        //verificamos que informacion se va a agregar y si lo acepta se integra a la BD
        if (respuesta == 0) {
            Connection cn = con.conectar();
            Conexion con = new Conexion();
            try {
                int cantidad=0;
                int existencias=0;
                java.util.Date d = jdFecha.getDate();
                     java.sql.Date date = new java.sql.Date(d.getTime());
                     String fecha=date.toString();
                cantidad =Integer.parseInt(txtExistencia.getText());
                existencias =Integer.parseInt(txtExistencias.getText());
                   
                PreparedStatement ps = null;
                
                    //se prepara a insertarlo en la tabla   
                    String sql = "UPDATE inventario set nombre=?, cantidad=?, unidad=?, orden=?, fecha=?, familia=?, total=? where idinventario=?";
                    ps = cn.prepareStatement(sql);
                    ps.setString(1, txtNombre.getText());
                    ps.setInt(2, cantidad);
                    ps.setString(3, jcUnidad.getSelectedItem().toString());
                    ps.setString(4, txtOrden.getText());
                    ps.setString(5, fecha);
                    ps.setString(6, txtFamilia.getText());
                    ps.setInt(7, existencias);
                    ps.setString(8, txtId.getText());
                    ps.execute();
                    
                    //actualizamos todos los valores
                    //actualizamos el total en todos los productos
                            sql = "UPDATE inventario set total=? WHERE nombre=?";
                            ps = cn.prepareStatement(sql);
                            
                            ps.setInt(1, Integer.valueOf(txtExistencias.getText()));
                            ps.setString(2, txtNombre.getText());
                            ps.executeUpdate();
                } catch (SQLException ex) {
                    System.out.println(ex);
                } 
                
                
                JOptionPane.showMessageDialog(null, "Producto Correctamente actualizado");
                inicio();
                mostrarTabla();
                btnBuscar.setEnabled(true);
                btnNuevo.setEnabled(true);
                txtNombre.setText("");
                txtExistencia.setText("");
                txtExistencias.setText("");
                txtFamilia.setText("");
                txtOrden.setText("");
                jdFecha.setDate(null);
                btnBorrar.setEnabled(true);
      }

    }//GEN-LAST:event_btnActualizarActionPerformed
    
    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
    
        this.dispose();

    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        String txt = txtBNombre.getText();
        
        // desde aqui mandamos a llamar a todos los usuarios y los listamos en la tabla
        // se crea una matriz para almacenar los datos
       
        String[] cabecera = {"id", "Nombre", "Orden","Familia", "Cantidad", "Unidad", "Fecha","Existencia"};
        // se definen los registros que llevara la tabla
        String[] registros = new String[8];
        // se hace el llamado sql de todos los usuarios
        String sql = "SELECT idinventario, nombre,orden,"
                + "familia,cantidad,unidad,fecha,total"
                + " FROM inventario where nombre like '%"+txt+"%';";
        //establecemos los anchos en pixeles de las columnas
        int[] anchos = {0, 200,100, 100, 100, 100, 100,100};
        modelo = new DefaultTableModel(null, cabecera);
        Connection cn = con.conectar();
        ResultSet rs = null;
        Statement st = null;
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {
                registros[0] = rs.getString("idinventario");
                registros[1] = rs.getString("nombre");
                registros[2] = rs.getString("orden");
                registros[3] = rs.getString("familia");
                registros[4] = rs.getString("cantidad");
                registros[5] = rs.getString("unidad");
                registros[6] = rs.getString("fecha");
                registros[7] = rs.getString("total");
                
                

                modelo.addRow(registros);

            }
            tabla.setModel(modelo);
            for (int i = 0; i < cabecera.length; i++) {
                tabla.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
                tabla.setFont(new java.awt.Font("Tahoma", 0, 12));
            }
            // asignamos la columna 0 para esconderla
            tabla.getColumnModel().getColumn(0).setMaxWidth(0);
            tabla.getColumnModel().getColumn(0).setMinWidth(0);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(0);
        } catch (SQLException ex) {
            System.out.println("Sin poder ejecutar el query a la tabla "+ex);
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       mostrarTabla();
       txtBNombre.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        int fila = tabla.getSelectedRow();
        if (fila >= 0) {
            String id = tabla.getValueAt(fila, 0).toString();
            
            int respuesta = JOptionPane.showConfirmDialog(this, "Estas seguro de eliminar ", "Atencion", 0);
            if (respuesta == 0) {
                Connection cn = con.conectar();
                Conexion con = new Conexion();
                Statement st;
                int restar=Integer.valueOf(tabla.getValueAt(fila, 4).toString());
                int total=Integer.valueOf(tabla.getValueAt(fila, 7).toString());
                String nombre=tabla.getValueAt(fila, 1).toString();
                int resultado=total-restar;
                System.out.println("valor restar " + restar);
                System.out.println("valor total " + total);
                System.out.println("valor resultado " + resultado);
                System.out.println("Nombre "+nombre);
                PreparedStatement ps = null;
                try {
                    //se prepara a insertarlo en la tabla   
                    String sql = "UPDATE inventario set total=?  where nombre=?";
                    ps = cn.prepareStatement(sql);
                    ps.setInt(1, resultado);
                    ps.setString(2, nombre);
                    ps.execute();
                } catch (SQLException ex) {
                    System.out.println(ex);
                }
                
                try {
                    String sql = "DELETE FROM inventario  where idinventario='" + id + "'";
                    st = cn.createStatement();
                    st.execute(sql);
                    mostrarTabla();
                } catch (SQLException ex) {
                    System.out.println(ex);
                } finally {
                    //DbUtils.closeQuietly(st);
                    DbUtils.closeQuietly(cn);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un nota a eliminar");
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void txtNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusLost
        int cantidad=0;
        Connection cn = con.conectar();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String nombre=txtNombre.getText();
        try {
            String sql = "SELECT total FROM inventario WHERE nombre=?";
            ps = cn.prepareStatement(sql);
            ps.setString(1, nombre);
            rs = ps.executeQuery();
            while (rs.next()) {
                txtExistencias.setText(rs.getString("total"));
            }            
        } catch (SQLException ex) {
            System.out.println(ex);;
        } finally {
            DbUtils.closeQuietly(rs);
            DbUtils.closeQuietly(ps);
            DbUtils.closeQuietly(cn);
            
        }
    }//GEN-LAST:event_txtNombreFocusLost

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adm_Inventario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcUnidad;
    private com.toedter.calendar.JDateChooser jdFecha;
    private javax.swing.JPanel panelMaterial;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtBNombre;
    private javax.swing.JLabel txtCantidad;
    private javax.swing.JTextField txtExistencia;
    private javax.swing.JTextField txtExistencias;
    private javax.swing.JTextField txtFamilia;
    private javax.swing.JLabel txtId;
    public static javax.swing.JLabel txtIdProveedor;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtOrden;
    // End of variables declaration//GEN-END:variables
}
